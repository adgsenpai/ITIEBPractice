================================================================================
IEB INFORMATION TECHNOLOGY PRACTICE PAPER 1
FOUNDATION LEVEL - BASIC CONCEPTS
Questions 2-5: Object-Oriented Programming Fundamentals
================================================================================

SCENARIO:
A local library wants to manage their book collection and member information.
You will create classes to represent books and members, and a system to manage them.

================================================================================
QUESTION 2: Creating a Simple Class - Book                            [13 marks]
================================================================================

Use the class diagram below to create a new class called Book. This class will 
store the details of a book in the library.

Book
Fields:
- title : string
- author : string
- pages : integer
- available : boolean

Methods:
+ Constructor(inTitle : string, inAuthor : string, 
              inPages : integer, inAvailable : boolean)
+ getTitle() : string
+ getAuthor() : string
+ getPages() : integer
+ isAvailable() : boolean
+ toString() : string

2.1  Create a new class named Book with the title, author, pages and available 
     fields, as shown in the class diagram. These fields must not be accessible 
     outside the class.                                                      (3)

2.2  Write code to create a parameterised constructor method that will accept 
     parameters for all fields, as shown in the class diagram and assign these 
     values to the corresponding fields.                                    (3)

2.3  Create accessor methods for the title, author and pages fields.       (2)

2.4  Code a method called isAvailable. This method should return whether the 
     book is available for borrowing or not.                                (2)

2.5  Create a toString method that will return a string that combines the values 
     of the title, author, and pages fields in the Book class. The format of 
     the string should be as follows:
     
     title<tab>author<tab>pages
     
     For example:
     The Great Gatsby    F. Scott Fitzgerald    180              (3)
                                                                   [13]

================================================================================
QUESTION 3: Creating a Class with Constants - Member                  [20 marks]
================================================================================

Use the class diagram below to create a new class called Member. This class will 
store the details of a library member and their membership type.

Member
Fields:
- name : string
- memberID : string
- memberType : integer
- joinDate : date
+ STUDENT = 1 : integer
+ ADULT = 2 : integer
+ SENIOR = 3 : integer

Methods:
+ Constructor(inName : string, inID : string, 
              inType : integer, inDate : date)
+ getName() : string
+ getJoinDate() : date
+ getMemberType() : string
+ setMemberType(inType : integer)
+ toString() : string

3.1  Create a new class named Member with the name, memberID, memberType and 
     joinDate fields as shown in the class diagram. These fields must not be 
     accessible outside the class.                                          (3)

3.2  Add the class constants STUDENT, ADULT and SENIOR as shown in the class 
     diagram.                                                               (2)

3.3  Code a parameterised constructor method that will accept parameters for 
     the name, member ID, member type and join date fields as shown in the 
     class diagram. Assign these values to the name, memberType and joinDate 
     fields of the class.
     
     Assign the memberID field as follows:
     o If the inID parameter is an empty string, then assign "TEMP000" to 
       the memberID field.
     o Otherwise, assign the inID parameter to the memberID field.          (5)

3.4  Add accessor methods for the name and joinDate fields of the class.   (2)

3.5  Code a getMemberType method to return a string representing the type of 
     the Member. This method must return:
     
     • 'Student' if the memberType is STUDENT
     • 'Adult' if the memberType is ADULT
     • 'Senior' if the memberType is SENIOR
     • 'Unknown' if the memberType is anything else                         (4)

3.6  Code a setMemberType method as shown in the class diagram to assign the 
     memberType of the Member.                                              (2)

3.7  Code a toString method to return the name, memberType and joinDate fields 
     on the same line. The memberType must be displayed as a text value and not 
     as an integer.
     
     The format should be as follows:
     name<tab>memberType<tab>joinDate
     
     For example:
     John Smith    Student    2023-01-15                                    (2)
                                                                             [20]

================================================================================
QUESTION 4: Creating a Manager Class - LibraryManager                 [31 marks]
================================================================================

4.1  Create a class called LibraryManager.                                 (1)

4.2  Create four fields for the LibraryManager class as described below:
     • An array called bookArr to store up to 100 Book objects.
     • A counter called bookSize to count the objects added to bookArr.
     • An array called memberArr to store up to 100 Member objects.
     • A counter called memberSize to count the objects added to memberArr.
     The fields should not be accessible outside the class.                 (3)

4.3  Create a constructor method that will read the contents of the text file 
     LibraryData.txt containing the information about Books and Members. The 
     first five lines contain data about Books. You may hardcode the number 5 
     in your solution. The remaining lines contain data about Members. 
     
     The method should do the following:
     • Check if the file LibraryData.txt exists.
     • Display a suitable error message if the file does not exist.
     • Open the file for reading.
     • Loop through the first five lines of the text file. In each iteration:
       − Read the line and split the data into separate parts.
       − Create a Book object and store it in the next available position in 
         the bookArr array.
       − Update the counter variable bookSize.
     • Loop through the remaining lines. In each iteration of the loop:
       − Read the line and split the data into separate parts.
       − Convert the join date into a Date object (the data is stored in the 
         format yyyy<space>MM<space>dd).
       − Create a Member object and store it in the next available position 
         in the memberArr array.
       − Update the counter variable memberSize.                           (15)

4.4  Write code to create a toString method. This method should return a string 
     with:
     • The heading 'Books'.
     • Underneath the heading the details of all Books, each on a new line.
     • A blank line.
     • The heading 'Members'.
     • Underneath the heading the details of all Members, each on a new line.
     Use the toString methods created in the previous classes.              (6)

4.5  Code a method named getLongTermMembers. This method should return the name 
     and length of time since the Member joined only for Members who joined 
     more than 3 years from the current date. Do NOT hardcode the current date.
     
     The format must be as follows:
     name<space>numYears<space>"years."
     
     For example:
     John Smith 5 years.                                                    (6)
                                                                            [31]

================================================================================
QUESTION 5: Creating a User Interface - LibraryUI                      [4 marks]
================================================================================

5.1  Write code to create a text-based user interface called LibraryUI that 
     will allow simple input and output.                                    (1)

5.2  Declare and instantiate a LibraryManager object.                      (1)

5.3  Write code to call the appropriate method in the LibraryManager class to 
     display a list of all Book objects and Member objects.
     
     Sample output format:
     Books
     The Great Gatsby    F. Scott Fitzgerald    180
     1984    George Orwell    328
     
     Members
     John Smith    Student    2023-01-15
     Jane Doe    Adult    2020-06-20                                        (1)

5.4  Write code to call the appropriate method in the LibraryManager class to 
     display all long term Members.
     
     Sample output:
     Jane Doe 4 years.                                                      (1)
                                                                             [4]

================================================================================
END OF PRACTICE PAPER 1
TOTAL: 68 marks
================================================================================

NOTES FOR LEARNERS:
• This paper focuses on basic object-oriented programming concepts
• Pay attention to proper encapsulation (private fields)
• Remember to use meaningful variable names
• Test your code with the sample data provided
• Make sure your constructors initialize all fields correctly
• Accessor methods should simply return the field values
• The toString method is important for displaying object information

SAMPLE DATA FILE: LibraryData.txt
The Great Gatsby#F. Scott Fitzgerald#180#true
1984#George Orwell#328#true
To Kill a Mockingbird#Harper Lee#281#false
The Catcher in the Rye#J.D. Salinger#214#true
Pride and Prejudice#Jane Austen#432#true
John Smith#STU001#1#2023 01 15
Jane Doe#ADT001#2#2020 06 20
Bob Wilson#SEN001#3#2019 03 10
Alice Brown#STU002#1#2024 02 01

================================================================================
