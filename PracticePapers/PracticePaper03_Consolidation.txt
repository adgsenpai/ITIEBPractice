================================================================================
IEB INFORMATION TECHNOLOGY PRACTICE PAPER 3
CONSOLIDATION - INTERMEDIATE+ LEVEL
Questions 2-5: Multiple Conditional Logic and Array Processing
================================================================================

SCENARIO:
A school wants to manage their student records and assessment results. You will 
create classes to represent students and assessments, and a system to analyze 
academic performance.

================================================================================
QUESTION 2: Creating a Class with Multiple Conditions - Assessment    [13 marks]
================================================================================

Use the class diagram below to create a new class called Assessment. This class 
will store the details of a student assessment.

Assessment
Fields:
- studentName : string
- subjectCode : string
- marks : integer
- totalMarks : integer

Methods:
+ Constructor(inStudent : string, inSubject : string, 
              inMarks : integer, inTotal : integer)
+ getStudentName() : string
+ getSubjectCode() : string
+ getMarks() : integer
+ getPercentage() : integer
+ getGrade() : string
+ toString() : string

2.1  Create a new class named Assessment with the studentName, subjectCode, 
     marks and totalMarks fields, as shown in the class diagram. These fields 
     must not be accessible outside the class.                              (3)

2.2  Write code to create a parameterised constructor method that will accept 
     parameters for all fields, as shown in the class diagram and assign these 
     values to the corresponding fields.                                    (3)

2.3  Create accessor methods for the studentName, subjectCode and marks fields. (2)

2.4  Code a method called getPercentage that calculates and returns the 
     percentage achieved by the student. The percentage should be calculated as 
     (marks / totalMarks) * 100 and rounded to the nearest integer.         (2)

2.5  Code a method called getGrade that returns the grade based on the 
     percentage:
     • "A" if percentage >= 80
     • "B" if percentage >= 70 and < 80
     • "C" if percentage >= 60 and < 70
     • "D" if percentage >= 50 and < 60
     • "E" if percentage < 50                                               (3)
                                                                            [13]

================================================================================
QUESTION 3: Creating a Class with Validation - Student                [20 marks]
================================================================================

Use the class diagram below to create a new class called Student. This class will 
store the details of a student and their stream.

Student
Fields:
- fullName : string
- studentNumber : string
- stream : integer
- enrollmentDate : date
+ SCIENCE = 1 : integer
+ COMMERCE = 2 : integer
+ ARTS = 3 : integer

Methods:
+ Constructor(inName : string, inNumber : string, 
              inStream : integer, inDate : date)
+ getFullName() : string
+ getEnrollmentDate() : date
+ getStream() : string
+ setStream(inStream : integer)
+ getYearLevel() : integer
+ toString() : string

3.1  Create a new class named Student with the fullName, studentNumber, stream 
     and enrollmentDate fields as shown in the class diagram. These fields must 
     not be accessible outside the class.                                   (3)

3.2  Add the class constants SCIENCE, COMMERCE and ARTS as shown in the class 
     diagram.                                                               (2)

3.3  Code a parameterised constructor method that will accept parameters for 
     the full name, student number, stream and enrollment date fields as shown 
     in the class diagram. Assign these values to the fullName, stream and 
     enrollmentDate fields of the class.
     
     Assign the studentNumber field as follows:
     o If the inNumber parameter has length less than 6, assign "TEMP" + 
       inNumber to the studentNumber field.
     o Otherwise, assign the inNumber parameter to the studentNumber field. (5)

3.4  Add accessor methods for the fullName and enrollmentDate fields of the 
     class.                                                                 (2)

3.5  Code a getStream method to return a string representing the stream of the 
     Student. This method must return:
     
     • 'Science' if the stream is SCIENCE
     • 'Commerce' if the stream is COMMERCE
     • 'Arts' if the stream is ARTS
     • 'Undeclared' if the stream is anything else                          (4)

3.6  Code a setStream method as shown in the class diagram to assign the stream 
     of the Student.                                                        (2)

3.7  Code a getYearLevel method that calculates how many years have passed since 
     the enrollmentDate and returns it as an integer. If less than 1 year has 
     passed, return 1. Do NOT hardcode the current date.                    (2)
                                                                            [20]

================================================================================
QUESTION 4: Creating a Manager Class - AcademicManager                [31 marks]
================================================================================

4.1  Create a class called AcademicManager.                                (1)

4.2  Create four fields for the AcademicManager class as described below:
     • An array called assessmentArr to store up to 100 Assessment objects.
     • A counter called assessmentSize to count objects added to assessmentArr.
     • An array called studentArr to store up to 100 Student objects.
     • A counter called studentSize to count objects added to studentArr.
     The fields should not be accessible outside the class.                 (3)

4.3  Create a constructor method that will read the contents of the text file 
     AcademicData.txt containing information about Students and Assessments. 
     The first eight lines contain data about Students. You may hardcode the 
     number 8 in your solution. The remaining lines contain data about 
     Assessments. 
     
     The method should do the following:
     • Check if the file AcademicData.txt exists.
     • Display a suitable error message if the file does not exist.
     • Open the file for reading.
     • Loop through the first eight lines of the text file. In each iteration:
       − Read the line and split the data into separate parts.
       − Convert the enrollment date into a Date object (the data is stored 
         in the format yyyy<space>MM<space>dd).
       − Create a Student object and store it in the next available position 
         in the studentArr array.
       − Update the counter variable studentSize.
     • Loop through the remaining lines. In each iteration of the loop:
       − Read the line and split the data into separate parts.
       − Create an Assessment object and store it in the next available 
         position in the assessmentArr array.
       − Update the counter variable assessmentSize.                       (15)

4.4  Write code to create a toString method. This method should return a string 
     with:
     • The heading 'Students'.
     • Underneath the heading the details of all Students, each on a new line.
     • A blank line.
     • The heading 'Assessments'.
     • Underneath the heading the details of all Assessments, each on a new line.
     Use the toString methods created in the previous classes.              (6)

4.5  Code a method named getTopPerformers. This method should return the student 
     name and average percentage only for students who have an average 
     percentage of 75% or higher across all their assessments. 
     
     The format must be as follows:
     studentName<space>averagePercentage<space>"%"
     
     For example:
     Emily Chen 82%                                                         (6)
                                                                            [31]

================================================================================
QUESTION 5: Creating a User Interface - AcademicUI                     [4 marks]
================================================================================

5.1  Write code to create a text-based user interface called AcademicUI that 
     will allow simple input and output.                                    (1)

5.2  Declare and instantiate an AcademicManager object.                    (1)

5.3  Write code to call the appropriate method in the AcademicManager class to 
     display a list of all Student objects and Assessment objects.
     
     Sample output format:
     Students
     Emily Chen    Science    2022-02-01
     Tom Wilson    Commerce    2023-08-15
     
     Assessments
     Emily Chen    MTH101    85    100
     Tom Wilson    BUS201    72    100                                      (1)

5.4  Write code to call the appropriate method in the AcademicManager class to 
     display all top performing students.
     
     Sample output:
     Emily Chen 82%                                                         (1)
                                                                             [4]

================================================================================
END OF PRACTICE PAPER 3
TOTAL: 68 marks
================================================================================

NOTES FOR LEARNERS:
• This paper focuses on percentage calculations and grading logic
• Practice multiple conditional statements (if-else if-else)
• Remember to round percentages correctly
• The getTopPerformers method requires calculating averages across arrays
• You need to loop through assessments for each student
• String validation (checking length) is an important concept here

SAMPLE DATA FILE: AcademicData.txt
Emily Chen#STU001#1#2022 02 01
Tom Wilson#STU002#2#2023 08 15
Sarah Brown#STU003#3#2021 09 10
Alex Kumar#004#1#2024 01 20
Jessica Lee#STU005#2#2023 05 12
Michael Park#STU006#1#2022 11 25
Olivia Davis#007#3#2024 02 28
Ryan Smith#STU008#2#2023 03 18
Emily Chen#MTH101#85#100
Emily Chen#PHY102#78#100
Tom Wilson#BUS201#72#100
Tom Wilson#ECO202#68#100
Sarah Brown#ENG301#88#100
Sarah Brown#HIS302#92#100
Alex Kumar#MTH101#55#100
Jessica Lee#BUS201#76#100
Jessica Lee#ECO202#80#100
Michael Park#PHY102#90#100
Olivia Davis#ENG301#65#100
Ryan Smith#BUS201#70#100

================================================================================
